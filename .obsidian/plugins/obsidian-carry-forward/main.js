/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    linkText: "",
    copiedLinkText: "(see {{LINK}})",
    lineFormatFrom: "\\s*$",
    lineFormatTo: " (see {{LINK}})",
    removeLeadingWhitespace: true,
};
const genID = (length = 5) => {
    const characters = "abcdefghijklmnopqrstuvwxyz-0123456789";
    let id = "";
    while (id.length < length) {
        id += characters[Math.floor(Math.random() * characters.length)];
    }
    return id.slice(0, length);
};
var CopyTypes;
(function (CopyTypes) {
    CopyTypes[CopyTypes["SeparateLines"] = 0] = "SeparateLines";
    CopyTypes[CopyTypes["CombinedLines"] = 1] = "CombinedLines";
    CopyTypes[CopyTypes["LinkOnly"] = 2] = "LinkOnly";
    CopyTypes[CopyTypes["LinkOnlyEmbed"] = 3] = "LinkOnlyEmbed";
})(CopyTypes || (CopyTypes = {}));
const blockIDRegex = /(?<=[\s^])\^[a-zA-Z0-9-]+$/u;
const copyForwardLines = (editor, view, settings, copy = CopyTypes.SeparateLines) => {
    var _a;
    const regexValidation = validateRegex(settings.lineFormatFrom);
    if (regexValidation.valid !== true) {
        new obsidian.Notice(`Error: 'From' setting is invalid:\n\n${regexValidation.string}\n\nPlease update the Carry-Forward settings and try again.`, 1000 * 30 // 30 seconds
        );
        return;
    }
    const cursorFrom = editor.getCursor("from");
    const cursorTo = editor.getCursor("to");
    const minLine = cursorFrom.line;
    const maxLine = cursorTo.line;
    const transaction = {
        changes: [],
    };
    const file = view.file;
    const updatedLines = [];
    const copiedLines = [];
    let newID = "";
    for (let lineNumber = minLine; lineNumber <= maxLine; lineNumber++) {
        let line = editor.getLine(lineNumber);
        let copiedLine = line;
        if (settings.removeLeadingWhitespace === true && (lineNumber === minLine && cursorFrom.ch === cursorTo.ch)) {
            // Remove leading whitespace if the user is copying a full line without
            // having selected a specific part of the line:
            copiedLine = copiedLine.replace(/^\s*/, '');
        }
        if ((lineNumber === minLine || lineNumber === maxLine) &&
            !(minLine === maxLine && cursorFrom.ch === cursorTo.ch)) {
            copiedLine = line.slice(lineNumber === minLine ? cursorFrom.ch : 0, lineNumber === maxLine ? cursorTo.ch : line.length - 1);
        }
        if (editor.getLine(lineNumber).match(/^\s*$/) &&
            !(lineNumber === minLine && minLine === maxLine)) {
            copiedLines.push(copiedLine);
            updatedLines.push(line);
            continue;
        }
        if (copy === CopyTypes.SeparateLines || lineNumber === minLine) {
            // Does the line already have a block ID?
            const blockID = line.match(blockIDRegex);
            let link = "";
            if (blockID === null) {
                // There is NOT an existing line ID:
                newID = `^${genID()}`;
                link = view.app.fileManager.generateMarkdownLink(file, "/", `#${newID}`, settings.linkText);
                line = line.replace(/\s*?$/, ` ${newID}`);
                if (copy === CopyTypes.LinkOnly || copy === CopyTypes.LinkOnlyEmbed) {
                    link = (copy === CopyTypes.LinkOnlyEmbed ? "!" : "") + link;
                    copiedLine =
                        copy === CopyTypes.LinkOnlyEmbed
                            ? link
                            : settings.copiedLinkText.replace("{{LINK}}", link);
                }
                else {
                    copiedLine = copiedLine.replace(new RegExp(settings.lineFormatFrom, "u"), settings.lineFormatTo.replace("{{LINK}}", link));
                }
            }
            else {
                // There IS an existing line ID:
                link = view.app.fileManager.generateMarkdownLink(file, "/", `#${blockID}`, settings.linkText);
                if (copy === CopyTypes.LinkOnly || copy === CopyTypes.LinkOnlyEmbed) {
                    link = (copy === CopyTypes.LinkOnlyEmbed ? "!" : "") + link;
                    copiedLine =
                        copy === CopyTypes.LinkOnlyEmbed
                            ? link
                            : settings.copiedLinkText.replace("{{LINK}}", link);
                }
                else {
                    copiedLine = copiedLine
                        .replace(blockIDRegex, "")
                        .replace(new RegExp(settings.lineFormatFrom, "u"), settings.lineFormatTo.replace("{{LINK}}", link));
                }
            }
        }
        if (!((copy === CopyTypes.LinkOnly || copy === CopyTypes.LinkOnlyEmbed) &&
            lineNumber !== minLine)) {
            copiedLines.push(copiedLine);
        }
        updatedLines.push(line);
    }
    navigator.clipboard.writeText(copiedLines.join("\n")).then(() => {
        new obsidian.Notice("Copied");
    });
    (_a = transaction.changes) === null || _a === void 0 ? void 0 : _a.push({
        from: { line: minLine, ch: 0 },
        to: { line: maxLine, ch: editor.getLine(maxLine).length },
        text: updatedLines.join("\n"),
    });
    transaction.selection = { from: cursorFrom, to: cursorTo };
    editor.transaction(transaction);
};
class CarryForwardPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading carry-forward-line plugin");
            yield this.loadSettings();
            this.addCommand({
                id: "carry-line-forward-separate-lines",
                name: "Copy selection with each line linked to its copied source",
                editorCallback: (editor, view) => {
                    return copyForwardLines(editor, view, this.settings, CopyTypes.SeparateLines);
                },
            });
            this.addCommand({
                id: "carry-line-forward-combined-lines",
                name: "Copy selection with first line linked to its copied source",
                editorCallback: (editor, view) => {
                    return copyForwardLines(editor, view, this.settings, CopyTypes.CombinedLines);
                },
            });
            this.addCommand({
                id: "carry-line-forward-link-only",
                name: "Copy link to line",
                editorCallback: (editor, view) => {
                    return copyForwardLines(editor, view, this.settings, CopyTypes.LinkOnly);
                },
            });
            this.addCommand({
                id: "carry-line-forward-embed-link-only",
                name: "Copy embed link to line",
                editorCallback: (editor, view) => {
                    return copyForwardLines(editor, view, this.settings, CopyTypes.LinkOnlyEmbed);
                },
            });
            this.addSettingTab(new CarryForwardSettingTab(this.app, this));
        });
    }
    onunload() {
        console.log("unloading carry-forward-line plugin");
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
const validateRegex = (regexString) => {
    let updatedRegexString = regexString
        // Because the plugin's settings are stored in JSON, characters like
        // \n get double-escaped, and then do not get replaced automatically
        // on use. This was causing To strings not to parse \n, etc.
        .replace(/\\n/g, "\n")
        .replace(/\\t/g, "\t")
        .replace(/\\r/g, "\r");
    try {
        new RegExp(updatedRegexString, "u");
        return { valid: true, string: updatedRegexString };
    }
    catch (e) {
        return {
            valid: false,
            string: `"${updatedRegexString}": "${e}"`,
        };
    }
};
class CarryForwardSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Carry-forward" });
        new obsidian.Setting(containerEl)
            .setName("Link text")
            .setDesc("Text of links. Leaving this blank will display the text of the actual link.")
            .addText((text) => {
            const settings = this.plugin.settings;
            text.setValue(settings.linkText).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                settings.linkText = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Copied text")
            .setDesc("The full text of copied references. Use {{LINK}} to place the link.")
            .addText((text) => {
            const settings = this.plugin.settings;
            text.setValue(settings.copiedLinkText).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                settings.copiedLinkText = value;
                yield this.plugin.saveSettings();
            }));
        });
        const fromToEl = containerEl.createEl("div");
        fromToEl.addClass("from-to-rule");
        if (validateRegex(this.plugin.settings.lineFormatFrom).valid !== true) {
            fromToEl.addClass("invalid");
        }
        new obsidian.Setting(fromToEl)
            .setName("Transform copied line")
            .setDesc("When copying a line, replace the first match of a Regular Expression with text. Use {{LINK}} in the To field to place the link.")
            .addText((text) => text
            .setPlaceholder(`From (Default: "${DEFAULT_SETTINGS.lineFormatFrom}")`)
            .setValue(this.plugin.settings.lineFormatFrom)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value === "") {
                this.plugin.settings.lineFormatFrom =
                    DEFAULT_SETTINGS.lineFormatFrom;
            }
            else {
                if (validateRegex(value).valid !== true) {
                    fromToEl.addClass("invalid");
                }
                else {
                    fromToEl.removeClass("invalid");
                }
                this.plugin.settings.lineFormatFrom = value;
            }
            yield this.plugin.saveSettings();
        })))
            .addText((text) => text
            .setPlaceholder(`To (Default: "${DEFAULT_SETTINGS.lineFormatTo}")`)
            .setValue(this.plugin.settings.lineFormatTo)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value === "") {
                this.plugin.settings.lineFormatTo = DEFAULT_SETTINGS.lineFormatTo;
            }
            else {
                this.plugin.settings.lineFormatTo = value;
            }
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Remove leading whitespace from first line")
            .setDesc("When copying a line without having selected a specific part of that line, remove any whitespace at the beginning of the copy.")
            .addToggle((toggle) => {
            const settings = this.plugin.settings;
            toggle.setValue(settings.removeLeadingWhitespace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                settings.removeLeadingWhitespace = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = CarryForwardPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
